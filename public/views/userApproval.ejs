<div class="container mx-auto px-4 py-4 sm:py-8">
    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4 sm:mb-6 gap-4">
        <div class="flex items-center gap-4">
            <a href="/roles"
                class="text-gray-600 dark:text-gray-400 hover:text-indigo-600 dark:hover:text-indigo-400 transition-colors">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24"
                    stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                </svg>
            </a>
            <h1 class="text-2xl sm:text-3xl font-bold text-gray-900 dark:text-gray-100">Aprobación de Usuarios</h1>
        </div>

        <div class="flex items-center gap-2">
            <span id="pending-count"
                class="px-3 py-1 bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200 rounded-full text-sm font-medium">
                0 pendientes
            </span>
        </div>
    </div>

    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-6">
        <h2 class="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-4">Estadísticas de Aprobación</h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div class="bg-blue-50 dark:bg-blue-900/30 p-4 rounded-lg">
                <div class="flex items-center">
                    <div class="rounded-full bg-blue-100 dark:bg-blue-800 p-3 mr-4">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-blue-600 dark:text-blue-400"
                            fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
                        </svg>
                    </div>
                    <div>
                        <p class="text-sm font-medium text-blue-800 dark:text-blue-200">Total Pendientes</p>
                        <p id="stats-pending" class="text-2xl font-bold text-blue-600 dark:text-blue-400">0</p>
                    </div>
                </div>
            </div>

            <div class="bg-green-50 dark:bg-green-900/30 p-4 rounded-lg">
                <div class="flex items-center">
                    <div class="rounded-full bg-green-100 dark:bg-green-800 p-3 mr-4">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-green-600 dark:text-green-400"
                            fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                    </div>
                    <div>
                        <p class="text-sm font-medium text-green-800 dark:text-green-200">Aprobados (30 días)</p>
                        <p id="stats-approved" class="text-2xl font-bold text-green-600 dark:text-green-400">0</p>
                    </div>
                </div>
            </div>

            <div class="bg-red-50 dark:bg-red-900/30 p-4 rounded-lg">
                <div class="flex items-center">
                    <div class="rounded-full bg-red-100 dark:bg-red-800 p-3 mr-4">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-red-600 dark:text-red-400"
                            fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                    </div>
                    <div>
                        <p class="text-sm font-medium text-red-800 dark:text-red-200">Rechazados (30 días)</p>
                        <p id="stats-rejected" class="text-2xl font-bold text-red-600 dark:text-red-400">0</p>
                    </div>
                </div>
            </div>
        </div>

        <div class="mt-6">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2">Distribución de Solicitudes</h3>
            <canvas id="userStatsChart"></canvas>
        </div>
    </div>

    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden">
        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
            <h2 class="text-xl font-semibold text-gray-900 dark:text-gray-100">Solicitudes Pendientes</h2>
            <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">Usuarios que requieren aprobación para acceder al
                sistema</p>
        </div>

        <div id="pending-users-container" class="p-6">
            <div id="no-pending-users" class="text-center py-12 text-gray-500 dark:text-gray-400">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mx-auto mb-4" fill="none" viewBox="0 0 24 24"
                    stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                </svg>
                <p class="text-lg font-medium">No hay usuarios pendientes de aprobación</p>
                <p class="mt-1">Todos los usuarios están aprobados o no hay solicitudes nuevas.</p>
            </div>
            <div id="pending-users-list" class="space-y-4 hidden">
            </div>
        </div>
    </div>

    <div id="reject-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden items-center justify-center p-4 z-50">
        <div class="bg-white dark:bg-gray-900 p-6 sm:p-8 rounded-lg shadow-xl w-full max-w-md">
            <h2 class="text-xl sm:text-2xl font-bold mb-4 text-gray-900 dark:text-gray-100">Rechazar Usuario</h2>
            <form id="reject-form">
                <input type="hidden" id="reject-user-id">
                <div class="mb-4">
                    <label for="reject-reason" class="block text-gray-700 dark:text-gray-300 font-medium mb-2">Motivo de
                        rechazo (opcional)</label>
                    <textarea id="reject-reason" rows="3"
                        class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 dark:bg-gray-700 dark:text-white dark:border-gray-600"
                        placeholder="Proporciona una razón para el rechazo (opcional)"></textarea>
                </div>
                <div class="flex flex-col sm:flex-row justify-end gap-2 sm:gap-4">
                    <button type="button" id="cancel-reject-btn"
                        class="w-full sm:w-auto px-4 py-2 rounded-lg text-gray-700 dark:text-gray-300 bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 transition">
                        Cancelar
                    </button>
                    <button type="submit"
                        class="w-full sm:w-auto px-4 py-2 rounded-lg text-white bg-red-600 hover:bg-red-700 transition">
                        Rechazar Usuario
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', async () => {
        // Cargar usuarios pendientes
        await loadPendingUsers();
        await loadStats();

        // Configurar eventos de los modales
        setupEventListeners();
    });

    async function loadPendingUsers() {
        try {
            const response = await fetch('/api/users/pending', {
                headers: {
                    'Accept': 'application/json'
                },
                credentials: 'include'
            });

            if (response.ok) {
                const users = await response.json();
                updatePendingUsersList(users);
            } else {
                console.error('Error al cargar usuarios pendientes');
            }
        } catch (error) {
            console.error('Error:', error);
        }
    }

    async function loadStats() {
        try {
            // En una implementación real, aquí harías una llamada a una API de estadísticas
            // Por ahora, usaremos datos de ejemplo
            const pendingCount = 5;
            const approvedCount = 12;
            const rejectedCount = 3;

            document.getElementById('stats-pending').textContent = pendingCount;
            document.getElementById('stats-approved').textContent = approvedCount;
            document.getElementById('stats-rejected').textContent = rejectedCount;
            document.getElementById('pending-count').textContent = `${pendingCount} pendientes`;

            // Crear el gráfico de pastel
            const ctx = document.getElementById('userStatsChart').getContext('2d');
            new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: ['Aprobados', 'Rechazados', 'Pendientes'],
                    datasets: [{
                        label: 'Solicitudes de Usuarios',
                        data: [approvedCount, rejectedCount, pendingCount],
                        backgroundColor: [
                            'rgba(76, 175, 80, 0.8)', // Verde para aprobados
                            'rgba(244, 67, 54, 0.8)',  // Rojo para rechazados
                            'rgba(255, 193, 7, 0.8)'   // Amarillo para pendientes
                        ],
                        borderColor: [
                            'rgba(76, 175, 80, 1)',
                            'rgba(244, 67, 54, 1)',
                            'rgba(255, 193, 7, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        title: {
                            display: true,
                            text: 'Distribución de Solicitudes de Usuarios'
                        }
                    }
                }
            });

        } catch (error) {
            console.error('Error al cargar estadísticas:', error);
        }
    }

    function updatePendingUsersList(users) {
        const container = document.getElementById('pending-users-list');
        const noUsersMsg = document.getElementById('no-pending-users');

        if (users.length === 0) {
            container.classList.add('hidden');
            noUsersMsg.classList.remove('hidden');
            return;
        }

        noUsersMsg.classList.add('hidden');
        container.classList.remove('hidden');
        container.innerHTML = '';

        users.forEach(user => {
            const userCard = document.createElement('div');
            userCard.className = 'bg-gray-50 dark:bg-gray-700 p-4 rounded-lg flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4';
            userCard.innerHTML = `
            <div class="flex-1">
                <h3 class="font-medium text-gray-800 dark:text-gray-200">${user.username}</h3>
                <p class="text-sm text-gray-600 dark:text-gray-400">${user.email || 'Sin email'} - Registrado: ${new Date(user.createdAt).toLocaleDateString()}</p>
            </div>
            <div class="flex flex-col sm:flex-row gap-2 w-full sm:w-auto">
                <button onclick="approveUser('${user.uuid}')" class="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition text-sm">
                    Aprobar
                </button>
                <button onclick="showRejectModal('${user.uuid}')" class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition text-sm">
                    Rechazar
                </button>
            </div>
        `;
            container.appendChild(userCard);
        });
    }

    function setupEventListeners() {
        // Modal de rechazo
        const rejectModal = document.getElementById('reject-modal');
        const cancelRejectBtn = document.getElementById('cancel-reject-btn');
        const rejectForm = document.getElementById('reject-form');

        cancelRejectBtn.addEventListener('click', () => {
            rejectModal.classList.add('hidden');
        });

        rejectForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const userId = document.getElementById('reject-user-id').value;
            const reason = document.getElementById('reject-reason').value;

            await rejectUser(userId, reason);
            rejectModal.classList.add('hidden');
        });

        // Cerrar modal al hacer clic fuera
        rejectModal.addEventListener('click', (e) => {
            if (e.target === rejectModal) {
                rejectModal.classList.add('hidden');
            }
        });
    }

    function showRejectModal(userId) {
        document.getElementById('reject-user-id').value = userId;
        document.getElementById('reject-reason').value = '';
        document.getElementById('reject-modal').classList.remove('hidden');
    }

    async function approveUser(userId) {
        try {
            const response = await fetch(`/api/users/${userId}/approve`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                credentials: 'include'
            });

            if (response.ok) {
                alert('Usuario aprobado exitosamente');
                await loadPendingUsers();
                await loadStats();
            } else {
                const error = await response.json();
                alert('Error: ' + error.error);
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Error al aprobar usuario');
        }
    }

    async function rejectUser(userId, reason) {
        try {
            const response = await fetch(`/api/users/${userId}/reject`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify({
                    reason
                }),
                credentials: 'include'
            });

            if (response.ok) {
                alert('Usuario rechazado exitosamente');
                await loadPendingUsers();
                await loadStats();
            } else {
                const error = await response.json();
                alert('Error: ' + error.error);
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Error al rechazar usuario');
        }
    }
</script>